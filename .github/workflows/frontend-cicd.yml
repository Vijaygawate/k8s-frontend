# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Build Step

on:
  push:
    branches: ['main']
#   pull_request:
#     branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.16.0]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - run: npm install
      - run: npm run build --if-present

  depchecktest:
    runs-on: ubuntu-latest
    needs: build
    name: depecheck_test
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Depcheck
        uses: dependency-check/Dependency-Check_Action@main
        id: Depcheck
        with:
          project: 'test'
          path: '.'
          format: 'HTML'
          out: 'reports' # this is the default, no need to specify unless you wish to override it
          args: >
            #--failOnCVSS 9
            --enableRetired
      - name: Upload Test results
        uses: actions/upload-artifact@master
        with:
           name: Dependency check report
           path: ${{github.workspace}}/reports

  test-stage:
    runs-on: ubuntu-latest
    needs: ['build', 'depchecktest']
    steps:
      - name: Running Tests
        uses: actions/checkout@v3
      - run: echo "runnigngngngngn"

  build-and-push-docker-image:
    name: Build Docker image and push to repositories
    # run only when code is compiling and tests are passing
    runs-on: ubuntu-latest
    needs: ['build', 'depchecktest', 'test-stage']

    # steps to perform in job
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # setup Docker build action
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to Github Packages
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.G_TOKEN }}

      - name: Build image and push to Docker Hub and GitHub Container Registry
        uses: docker/build-push-action@v2
        with:
          # relative path to the place where source code with Dockerfile is located
          context: ./
          # Note: tags has to be all lower-case
          tags: |
            vijaygawate/k8s-frontend:${{ github.sha }} 
            ghcr.io/vijaygawate/k8s-frontend:${{ github.sha }}
          # build on feature branches, push only on main branch
          push: ${{ github.ref == 'refs/heads/main' }}

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  Docker-image-scan:
    runs-on: ubuntu-latest
    needs: ['build', 'depchecktest', 'build-and-push-docker-image', 'test-stage']
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'docker.io/vijaygawate/k8s-frontend'
          format: 'json'
          output: 'trivy-results.json'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
      - name: Upload Test results
        uses: actions/upload-artifact@master
        with:
           name: Trvy scan report
           path: ${{github.workspace}}/reports

  update-manifest-stage:
    runs-on: ubuntu-latest
    needs: ['build-and-push-docker-image']
    steps:
      - uses: actions/checkout@v3
        with:
          repository: Vijaygawate/k8s-manifest
          ref: 'main'
          token: ${{ secrets.G_TOKEN }}
      - name: setup git config
        run: |
          git config --global user.email "vijaygawate79@gmail.com"
          git config --global user.name "Vijaygawate"
          echo ${{ github.sha }}
          sed -i "s#vijaygawate/k8s-frontend.*#vijaygawate/k8s-frontend:${{ github.sha }}#g" frontend.yaml
          git add -A
          git commit -am "Update image for - ${{ github.sha }}"
      - run: echo ${{ github }}
      - run: git push origin main
